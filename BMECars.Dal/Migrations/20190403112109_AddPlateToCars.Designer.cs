// <auto-generated />
using System;
using BMECars.Dal;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BMECars.Dal.Migrations
{
    [DbContext(typeof(BMECarsDbContext))]
    [Migration("20190403112109_AddPlateToCars")]
    partial class AddPlateToCars
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.8-servicing-32085")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BMECars.Dal.Entities.BillingData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<string>("City");

                    b.Property<string>("Company");

                    b.Property<string>("Country");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<string>("Postal");

                    b.Property<string>("State");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("BillingDatas");
                });

            modelBuilder.Entity("BMECars.Dal.Entities.Car", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Bag");

                    b.Property<string>("Brand");

                    b.Property<int>("Category");

                    b.Property<bool>("Climate");

                    b.Property<int>("CompanyId");

                    b.Property<int>("Door");

                    b.Property<string>("Image");

                    b.Property<bool>("IsFuelFull");

                    b.Property<int>("PickUpLocationId");

                    b.Property<string>("Plate");

                    b.Property<int>("Price");

                    b.Property<int>("Seat");

                    b.Property<int>("Transmission");

                    b.Property<int>("Year");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("PickUpLocationId");

                    b.ToTable("Cars");

                    b.HasData(
                        new { Id = 1, Bag = 2, Brand = "Audi", Category = 5, Climate = true, CompanyId = 1, Door = 2, IsFuelFull = true, PickUpLocationId = 1, Price = 15000, Seat = 2, Transmission = 0, Year = 2000 },
                        new { Id = 2, Bag = 2, Brand = "Audi", Category = 3, Climate = true, CompanyId = 1, Door = 3, IsFuelFull = true, PickUpLocationId = 1, Price = 15000, Seat = 2, Transmission = 0, Year = 2000 },
                        new { Id = 3, Bag = 2, Brand = "Audi", Category = 5, Climate = false, CompanyId = 1, Door = 2, IsFuelFull = false, PickUpLocationId = 1, Price = 20000, Seat = 2, Transmission = 0, Year = 2000 },
                        new { Id = 4, Bag = 4, Brand = "BMW", Category = 3, Climate = true, CompanyId = 1, Door = 2, IsFuelFull = false, PickUpLocationId = 1, Price = 15000, Seat = 2, Transmission = 0, Year = 2000 },
                        new { Id = 5, Bag = 6, Brand = "BMW", Category = 4, Climate = true, CompanyId = 1, Door = 2, IsFuelFull = false, PickUpLocationId = 1, Price = 20000, Seat = 2, Transmission = 1, Year = 2002 },
                        new { Id = 6, Bag = 2, Brand = "BMW", Category = 2, Climate = true, CompanyId = 2, Door = 4, IsFuelFull = false, PickUpLocationId = 1, Price = 20000, Seat = 2, Transmission = 1, Year = 2012 },
                        new { Id = 7, Bag = 2, Brand = "BMW", Category = 5, Climate = false, CompanyId = 2, Door = 5, IsFuelFull = true, PickUpLocationId = 1, Price = 20000, Seat = 2, Transmission = 0, Year = 2000 },
                        new { Id = 8, Bag = 3, Brand = "Jeep", Category = 4, Climate = true, CompanyId = 3, Door = 6, IsFuelFull = true, PickUpLocationId = 1, Price = 15000, Seat = 2, Transmission = 0, Year = 2000 },
                        new { Id = 9, Bag = 2, Brand = "Tesla", Category = 5, Climate = false, CompanyId = 3, Door = 2, IsFuelFull = false, PickUpLocationId = 1, Price = 15300, Seat = 2, Transmission = 1, Year = 2000 },
                        new { Id = 10, Bag = 5, Brand = "Tesla", Category = 2, Climate = true, CompanyId = 3, Door = 9, IsFuelFull = true, PickUpLocationId = 1, Price = 15010, Seat = 2, Transmission = 0, Year = 2019 },
                        new { Id = 11, Bag = 4, Brand = "Toyota", Category = 4, Climate = false, CompanyId = 4, Door = 2, IsFuelFull = true, PickUpLocationId = 1, Price = 15900, Seat = 2, Transmission = 1, Year = 2015 },
                        new { Id = 12, Bag = 3, Brand = "Toyota", Category = 2, Climate = true, CompanyId = 4, Door = 12, IsFuelFull = false, PickUpLocationId = 1, Price = 150000, Seat = 2, Transmission = 1, Year = 2016 }
                    );
                });

            modelBuilder.Entity("BMECars.Dal.Entities.CarExtra", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CarId");

                    b.Property<int>("ExtraId");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.HasIndex("ExtraId");

                    b.ToTable("CarExtras");
                });

            modelBuilder.Entity("BMECars.Dal.Entities.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Companies");

                    b.HasData(
                        new { Id = 1, Name = "Bardi auto", UserId = "fbc5fe4c-7f97-4969-9937-23a191322bfd" },
                        new { Id = 2, Name = "Top Cars", UserId = "fbc5fe4c-7f97-4969-9937-23a191322bfd" },
                        new { Id = 3, Name = "EuroCar", UserId = "fbc5fe4c-7f97-4969-9937-23a191322bfd" },
                        new { Id = 4, Name = "MyWay", UserId = "fbc5fe4c-7f97-4969-9937-23a191322bfd" }
                    );
                });

            modelBuilder.Entity("BMECars.Dal.Entities.CompanyAdmin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompanyId");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("UserId");

                    b.ToTable("CompanyAdmins");
                });

            modelBuilder.Entity("BMECars.Dal.Entities.Extra", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Extras");
                });

            modelBuilder.Entity("BMECars.Dal.Entities.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<string>("City");

                    b.Property<int?>("CompanyId");

                    b.Property<string>("Country");

                    b.Property<bool>("IsGlobal");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Locations");

                    b.HasData(
                        new { Id = 1, Address = "Ferihegy Airport", City = "Budapest", CompanyId = 1, Country = "Hungary", IsGlobal = true }
                    );
                });

            modelBuilder.Entity("BMECars.Dal.Entities.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CarId");

                    b.Property<int>("DropDownLocationId");

                    b.Property<int>("PickUpLocationId");

                    b.Property<int>("ReservationPrice");

                    b.Property<DateTime>("ReserveFrom");

                    b.Property<DateTime>("ReserveTo");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.HasIndex("DropDownLocationId");

                    b.HasIndex("PickUpLocationId");

                    b.HasIndex("UserId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("BMECars.Dal.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<DateTime>("BirthDate");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FullName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("Password");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("BMECars.Dal.Entities.BillingData", b =>
                {
                    b.HasOne("BMECars.Dal.Entities.User", "User")
                        .WithOne("BillingData")
                        .HasForeignKey("BMECars.Dal.Entities.BillingData", "UserId");
                });

            modelBuilder.Entity("BMECars.Dal.Entities.Car", b =>
                {
                    b.HasOne("BMECars.Dal.Entities.Company", "Company")
                        .WithMany("Cars")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BMECars.Dal.Entities.Location", "PickUpLocation")
                        .WithMany("Cars")
                        .HasForeignKey("PickUpLocationId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("BMECars.Dal.Entities.CarExtra", b =>
                {
                    b.HasOne("BMECars.Dal.Entities.Car", "Car")
                        .WithMany("CarExtras")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BMECars.Dal.Entities.Extra", "Extra")
                        .WithMany("CarExtras")
                        .HasForeignKey("ExtraId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("BMECars.Dal.Entities.Company", b =>
                {
                    b.HasOne("BMECars.Dal.Entities.User", "Owner")
                        .WithMany("Companies")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("BMECars.Dal.Entities.CompanyAdmin", b =>
                {
                    b.HasOne("BMECars.Dal.Entities.Company", "Company")
                        .WithMany("CompanyAdmins")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BMECars.Dal.Entities.User", "User")
                        .WithMany("CompanyAdmins")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("BMECars.Dal.Entities.Location", b =>
                {
                    b.HasOne("BMECars.Dal.Entities.Company", "Company")
                        .WithMany("PickUpLocations")
                        .HasForeignKey("CompanyId");
                });

            modelBuilder.Entity("BMECars.Dal.Entities.Reservation", b =>
                {
                    b.HasOne("BMECars.Dal.Entities.Car", "Car")
                        .WithMany("Reservations")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BMECars.Dal.Entities.Location", "DropDownLocation")
                        .WithMany("ReservationsDropDown")
                        .HasForeignKey("DropDownLocationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BMECars.Dal.Entities.Location", "PickUpLocation")
                        .WithMany("ReservationsPickUp")
                        .HasForeignKey("PickUpLocationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BMECars.Dal.Entities.User", "User")
                        .WithMany("Reservations")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BMECars.Dal.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BMECars.Dal.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BMECars.Dal.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BMECars.Dal.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
